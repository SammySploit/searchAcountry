{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","media","height","App","classes","useState","countries","setCountries","searchedCountry","setSearchedCountry","filteredCountries","toUpperCase","countryToShow","filter","country","name","indexOf","useEffect","axios","get","then","response","data","className","TextField","id","label","placeholder","onChange","e","target","value","multiline","length","map","populate","parseInt","population","toLocaleString","Card","CardActionArea","CardMedia","image","flag","title","CardContent","Typography","gutterBottom","variant","component","color","capital","languages","lang","onClick","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wVAWMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,OAiHGC,EA7GH,WACV,IAAMC,EAAUP,IADA,EAEkBQ,mBAAS,IAF3B,mBAETC,EAFS,KAEEC,EAFF,OAG8BF,mBAAS,IAHvC,mBAGTG,EAHS,KAGQC,EAHR,KASVC,EAAoBF,EAAgBG,cACpCC,EAAgBN,EAAUO,QAAO,SAACC,GACtC,OAAOA,EAAQC,KAAKJ,cAAcK,QAAQN,IAAsB,KAWlE,OAPAO,qBAAU,WACRC,IAAMC,IAAI,wCAAwCC,MAAK,SAACC,GAEtDd,EAAac,EAASC,WAEvB,IAGD,yBAAKC,UAAU,SACf,yBAAKA,UAAU,OACb,6BACE,kBAACC,EAAA,EAAD,CACEC,GAAG,oBACHC,MAAM,mBACNC,YAAY,SACZC,SAzBa,SAACC,GACpBpB,EAAmBoB,EAAEC,OAAOC,QAyBtBC,WAAS,KAEN,IACP,yBAAKT,UAAU,kBACZX,EAAcqB,QAAU,IACvB,8BAAM,2BAAG,wEACPrB,EAAcqB,QAAU,GAC1B,8BAAM,2BAAG,4EACkB,IAAzBrB,EAAcqB,OAChBrB,EAAcsB,KAAI,SAACpB,GACjB,IAAIqB,EAAWC,SAAStB,EAAQuB,YAAYC,iBAC5C,OACE,yBAAKf,UAAY,QACf,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACElB,UAAWnB,EAAQH,MACnByC,MAAO5B,EAAQ6B,KACfC,MAAM,iBAER,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7CnC,EAAQC,MAEX,kBAAC+B,EAAA,EAAD,CACEI,MAAM,gBACNF,QAAQ,KACRC,UAAU,IACV1B,UAAU,OAJZ,YAMYT,EAAQqC,SAEpB,kBAACL,EAAA,EAAD,CACEI,MAAM,gBACNF,QAAQ,KACRC,UAAU,IACV1B,UAAU,OAJZ,eAMeY,GAEf,kBAACW,EAAA,EAAD,CACEI,MAAM,gBACNF,QAAQ,KACRC,UAAU,IACV1B,UAAU,OAJZ,cAQCT,EAAQsC,UAAUlB,KAAI,SAACmB,GACtB,OAAO,wBAAI9B,UAAU,QAAQ8B,EAAKtC,gBAQ9CH,EAAcsB,KAAI,SAACpB,GACrB,OAAON,EAAgByB,OACrB,6BACA,kBAACM,EAAA,EAAD,CAAMe,QAAS,kBAAM7C,EAAmBK,EAAQC,OAAOwC,IAAKzC,EAAQC,KAAMQ,UAAY,SACpF,kBAACiB,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,KACJ,0BAAMS,QAAS,kBAAM7C,EAAmBK,EAAQC,OAAOwC,IAAKzC,EAAQC,MACjED,EAAQC,UAMX,qCC7GQyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.445bc722.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 200,\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n  const [countries, setCountries] = useState([]);\n  const [searchedCountry, setSearchedCountry] = useState(\"\");\n\n  const handleSearch = (e) => {\n    setSearchedCountry(e.target.value);\n  };\n\n  const filteredCountries = searchedCountry.toUpperCase();\n  const countryToShow = countries.filter((country) => {\n    return country.name.toUpperCase().indexOf(filteredCountries) > -1;\n  });\n  // console.log(searchedCountry);\n\n  useEffect(() => {\n    axios.get(\"https://restcountries.eu/rest/v2/all\").then((response) => {\n      // console.log(response.data);\n      setCountries(response.data);\n    });\n  }, []);\n  // console.log(countries);\n  return (\n    <div className=\"bgimg\">\n    <div className=\"App\">\n      <div>\n        <TextField\n          id=\"standard-textarea\"\n          label=\"Search a Country\"\n          placeholder=\"Search\"\n          onChange={handleSearch}\n          multiline\n        />\n      </div>{\" \"}\n      <div className=\"show-countries\">\n        {countryToShow.length >= 250 ? (\n          <font><b><p>Please enter a country to know about...</p></b></font>\n        ) : countryToShow.length >= 20 ? (\n          <font><b><p>Too many matches, please specify a bit more</p></b></font>\n        ) : countryToShow.length === 1 ? (\n          countryToShow.map((country) => {\n            let populate = parseInt(country.population).toLocaleString();\n            return (\n              <div className = \"card\">\n                <Card>\n                  <CardActionArea>\n                    <CardMedia\n                      className={classes.media}\n                      image={country.flag}\n                      title=\"Country Flag\"\n                    />\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h4\" component=\"h4\">\n                        {country.name}\n                      </Typography>\n                      <Typography\n                        color=\"textSecondary\"\n                        variant=\"h6\"\n                        component=\"p\"\n                        className=\"cap\"\n                      >\n                        Capital: {country.capital}\n                      </Typography>\n                      <Typography\n                        color=\"textSecondary\"\n                        variant=\"h6\"\n                        component=\"p\"\n                        className=\"cap\"\n                      >\n                        Population: {populate}\n                      </Typography>\n                      <Typography\n                        color=\"textSecondary\"\n                        variant=\"h6\"\n                        component=\"p\"\n                        className=\"cap\"\n                      >\n                        Languages:\n                      </Typography>\n                      {country.languages.map((lang) => {\n                        return <li className=\"caps\">{lang.name}</li>;\n                      })}\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </div>\n            );\n          })\n        ) : countryToShow.map((country) => {\n          return searchedCountry.length \n          ? <div>\n            <Card onClick={() => setSearchedCountry(country.name)} key={country.name} className = \"cards\">\n              <CardActionArea>\n                <CardContent>\n            <span onClick={() => setSearchedCountry(country.name)} key={country.name}>\n              {country.name}\n            </span>\n            </CardContent>\n            </CardActionArea>\n            </Card>\n          </div> \n          : <div></div>\n        })}\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}